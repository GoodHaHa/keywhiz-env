#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Thu Sep 15 10:08:14 2016
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./wizard.sh
match_max 100000
expect -exact "*** Keywhiz Setup Wizard ***\r
\r
The Keywhiz Setup Wizard will take you through a step-by-step process to\r
bootstrap a Keywhiz server container. This includes generating a new content\r
encryption key, adding an initial admin user, as well as adding certificates\r
for the Keywhiz server to run. All generated keys and secrets will be stored in\r
the /secrets directory inside the container, and an empty H2 database will be\r
created in /data. You should make sure you have persistent volumes mounted in\r
those places!\r
\r
Note that if you wish to run Keywhiz with an external database you can do so\r
by supplying your own config file via the KEYWHIZ_CONFIG environment variable.\r
The wizard will set up an H2 database by default, which should be sufficent\r
for most deployments (unless you expect a very high volume of traffic).\r
\r
The wizard will overwrite previously generated data if present. Proceed? (y/n) "
send -- "y\r"
expect -exact "y\r
\r
Generating a new cookie secret... done\r
Generating a new content encryption key... done\r
\r
Keywhiz requires a SSL/TLS server certificate and private key to run.\r
\r
Please copy the following files into the container:\r
  1. Copy your certificate chain to /secrets/keywhiz.pem\r
  2. Copy your private key to /secrets/keywhiz-key.pem\r
  3. Copy your CA bundle to /secrets/ca-bundle.pem\r
  4. Copy a valid CRL file to /secrets/ca-crl.pem\r
\r
Files can be copied into a running container with docker cp.\r
\r
Hit enter to continue."
send -- "\r"
expect "New username:"
send -- "admin\r"
expect -exact "admin\r
password for 'admin': "
send -- "ponies\r"
expect "You can start ./wizard-start.sh"
exit
